# Charts {#sec-charts}

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
status("restructuring")
```

```{r}
#| label: setup
#| message: false

library(tidyverse)
library(ggrepel)
library(patchwork)
```

## Introduction

In this chapter, you'll learn the basic supported diagrams.

### Basic GraphViz diagram

```{dot}
digraph finite_state_machine {
	rankdir=LR;
	size="8,5"
	node [shape = doublecircle]; LR_0 LR_3 LR_4 LR_8;
	node [shape = circle];
	LR_0 -> LR_2 [ label = "SS(B)" ];
	LR_0 -> LR_1 [ label = "SS(S)" ];
	LR_1 -> LR_3 [ label = "S($end)" ];
	LR_2 -> LR_6 [ label = "SS(b)" ];
	LR_2 -> LR_5 [ label = "SS(a)" ];
	LR_2 -> LR_4 [ label = "S(A)" ];
	LR_5 -> LR_7 [ label = "S(b)" ];
	LR_5 -> LR_5 [ label = "S(a)" ];
	LR_6 -> LR_6 [ label = "S(b)" ];
	LR_6 -> LR_5 [ label = "S(a)" ];
	LR_7 -> LR_8 [ label = "S(b)" ];
	LR_7 -> LR_5 [ label = "S(a)" ];
	LR_8 -> LR_6 [ label = "S(b)" ];
	LR_8 -> LR_5 [ label = "S(a)" ];
}
```

### Basic Plant UML diagram

There does not appear to be a built-in plantuml support like there is with mermaid, but there might be a few ways, including extension methods

{{< ezplantuml >}}

```

@startuml
Alice -> Bob: Authentication Request Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request Alice <-- Bob: another Response
@enduml
```

# Basic Mermaid Diagram

```{mermaid}
sequenceDiagram
  participant Alice
  participant Bob
  Alice->>John: Hello John, how are you?
  loop Healthcheck
    John->>John: Fight against hypochondria
  end
  Note right of John: Rational thoughts <br/>prevail!
  John-->>Alice: Great!
  John->>Bob: How about you?
  Bob-->>John: Jolly good!
```

## ggplot

```{r}
#| echo: false
#| fig-asp: 1
#| out-width: "50%"
#| fig-width: 3
#| fig-alt: >
#|   Scatterplot with math text on the x and y axis labels. X-axis label 
#|   says sum of x_i  squared, for i from 1 to n. Y-axis label says alpha + 
#|   beta + delta over theta.

df <- tibble(
  x = 1:10,
  y = x ^ 2
)

ggplot(df, aes(x, y)) +
  geom_point() +
  labs(
    x = quote(sum(x[i] ^ 2, i == 1, n)),
    y = quote(alpha + beta + frac(delta, theta))
  )
```


## Basic line chart with ggplot2 and geom line

```{r}
#| echo: false
#| fig-asp: 1
#| out-width: "50%"
#| fig.cap: "Basic line chart with ggplot2 and geom line"
#| fig-width: 3
#| fig-alt: >
#|   Basic line chart with ggplot2 and geom line
library(ggplot2)

xValue <- 1:10
yValue <- cumsum(rnorm(10))
data <- data.frame(xValue,yValue)

ggplot(data, aes(x=xValue, y=yValue)) + geom_line()
```


## Summary

- Overall, there are some good built-in features here
- Missing built-in plantuml support is a negative, but we have options.
- matplotlib also had some dependency issues, but ggplot works.
